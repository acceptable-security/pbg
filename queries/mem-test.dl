.type address = number
.type step = symbol

.decl next_step(from: step, to: step)
.decl step_address(from: step, to: address)

.decl malloc_amt(at_step: step, size: number)
.decl malloc_ptr(at_step: step, ptr: address)

.decl realloc_new_ptr(at_step: step, ptr: address)
.decl realloc_amt(at_step: step, size: number)
.decl realloc_old_ptr(at_step: step, ptr: address)

.decl write_address(pc: address, dest: address)
.decl read_address(pc: address, from: address)

.decl free(at_step: step, addr: address)
.decl text_at_pc(line: symbol, pc: address)

.input realloc_new_ptr
.input realloc_amt
.input realloc_old_ptr
.input next_step
.input step_address
.input write_address
.input read_address
.input malloc_amt
.input malloc_ptr
.input free
.input text_at_pc

.decl malloc(at_step: step, size: number, heap_addr: address)
malloc(a, s, h) :- malloc_amt(a, s), malloc_ptr(a, h).

.decl realloc(at_step: step, size: number, old_addr: address, new_addr: address)
realloc(a, s, o, n) :- realloc_amt(a, s), realloc_old_ptr(a, o), realloc_new_ptr(a, n).

.decl next_step_no_free(from_step: step, dest_step: step, heap_addr: address)
next_step_no_free(x, y, h) :-
	next_step(x, y), malloc_ptr(_, h),
	!free(y, h).

.decl reach_without_free(from_step: step, dest_step: step, heap_addr: address)
reach_without_free(x, y, h) :-
    next_step_no_free(x, y, h) ;
    next_step_no_free(x, z, h), next_step_no_free(z, y, h).

.decl malloc_reach(alloc_step: step, dest_step: step, heap_addr: address, heap_size: number)
malloc_reach(a, d, h, s) :-
    malloc(a, s, h), reach_without_free(a, d, h).

.decl invalid_heap_access(pc: address, dest: address, type: symbol)
invalid_heap_access(p, d, t) :-
    (write_address(p, d), t="write"; read_address(p, d), t="read"),
    step_address(x, p),
    malloc_reach(_, x, d2, s),
    (d < d2 ; d >= d2 + s). // Bounds check

.decl invalid_free(pc: address, dest: address)
invalid_free(p, d) :-
	free(s1, d), !malloc_reach(_, s1, _, _),
	step_address(s1, p).

.decl not_useless_realloc(at_step: step)

not_useless_realloc(st) :-
	malloc(_, sz1, ptr1), realloc(st, sz2, ptr1, ptr2),
	write_address(_, wrt), wrt >= ptr2 + sz1, wrt <= ptr2 + sz2,
	sz1 > sz2.

.decl useless_realloc(pc: address)

useless_realloc(pc) :-
	malloc(_, _, ptr1), realloc(st2, _, ptr1, _),
	!not_useless_realloc(st2),
	step_address(st2, pc).

.output invalid_free
.output invalid_heap_access
.output useless_realloc