.type address = number

.decl next_address(from: address, to: address)
.decl write_address(pc: address, dest: address)
.decl read_address(pc: address, from: address)
.decl malloc(pc: address, size: number, addr: address)
.decl free(pc: address, addr: address)
.decl text_at_pc(line: symbol, pc: address)

.input next_address
.input write_address
.input read_address
.input malloc
.input free
.input text_at_pc

.decl next_addr_no_free(from_pc: address, next_pc: address, heap_addr: address)
next_addr_no_free(x, y, h) :- next_address(x, y), malloc(_, _, h), !free(y, h).

.decl reach(from_pc: address, next_pc: address)
reach(x, y) :-
    next_address(x, y) ;
    next_address(x, z), reach(z, y).

.decl reach_without_free(from_pc: address, dest_pc: address, heap_addr: address)
reach_without_free(x, y, h) :-
    next_addr_no_free(x, y, h) ;
    next_addr_no_free(x, z, h), reach_without_free(z, y, h).

.decl malloc_reach(alloc_pc: address, dest_pc: address, heap_addr: address, heap_size: number)
malloc_reach(a, d, h, s) :-
    malloc(a, s, h), reach_without_free(a, d, h).

.decl invalid_heap_access(pc: address, dest: address, type: symbol)
invalid_heap_access(p, d, t) :-
    (write_address(p, d), t="write"; read_address(p, d), t="read"),
    malloc_reach(a, p, d2, s), (d < d2 ; d >= d2 + s).

.decl invalid_free(pc: address, dest: address)
invalid_free(p, d) :- free(p, d), !malloc_reach(_, p, _, _).

.output invalid_free
.output invalid_heap_access